{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "b11832e3-6c72-46ac-b68a-9c593c41d1bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Result for model metrics\n",
    "results = {\n",
    "    \"Model\": [\"XGBoost\", \"Logistic Regression (Bayesian)\"],\n",
    "    \"Accuracy\": [0.65, 0.61],\n",
    "    \"Precision\": [0.59, 0.54],\n",
    "    \"Recall\": [0.65, 0.62],\n",
    "    \"F1-Score\": [0.60, 0.59],\n",
    "    \"NDCG Score\": [0.83, 0.82]\n",
    "}\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "\n",
    "# Display Model Metrics\n",
    "st.write(\"### Model Performance Metrics\")\n",
    "st.dataframe(results_df)  # Displays the DataFrame in a scrollable format\n",
    "\n",
    "# Set up the figure and axes\n",
    "fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n",
    "\n",
    "# Create a bar width and x positions for bars\n",
    "bar_width = 0.2\n",
    "x = np.arange(len(results_df['Model']))\n",
    "\n",
    "# Plot Accuracy, Recall, Precision, F1-Score (on the first subplot)\n",
    "ax[0].bar(x - bar_width*1.5, results_df['Accuracy'], width=bar_width, label=\"Accuracy\")\n",
    "ax[0].bar(x - bar_width/2, results_df['Recall'], width=bar_width, label=\"Recall\")\n",
    "ax[0].bar(x + bar_width/2, results_df['Precision'], width=bar_width, label=\"Precision\")\n",
    "ax[0].bar(x + bar_width*1.5, results_df['F1-Score'], width=bar_width, label=\"F1-Score\")\n",
    "ax[0].set_xticks(x)\n",
    "ax[0].set_xticklabels(results_df['Model'])\n",
    "ax[0].legend()\n",
    "ax[0].set_title(\"Accuracy, Recall, Precision, F1-Score Comparison\")\n",
    "\n",
    "# Plot NDCG Score (on the second subplot)\n",
    "ax[1].bar(results_df['Model'], results_df['NDCG Score'], label=\"NDCG Score\", color='purple')\n",
    "ax[1].legend()\n",
    "ax[1].set_title(\"NDCG Score Comparison\")\n",
    "\n",
    "# Display the plot in Streamlit\n",
    "st.pyplot(fig)\n",
    "\n",
    "# Load and display the 'result_Best_Score.csv'\n",
    "sub_whole_df = pd.read_csv('result_Best_Score.csv')\n",
    "\n",
    "# Dropdown for test_ids\n",
    "selected_test_id = st.selectbox(\"Select test_id\", sub_whole_df['id'].unique())\n",
    "filtered_by_test_id = sub_whole_df[sub_whole_df['id'] == selected_test_id]\n",
    "st.write(f\"### Results for id {selected_test_id}\")\n",
    "st.write(filtered_by_test_id)\n",
    "\n",
    "# Dropdown for lbl_encoder\n",
    "selected_lbl_encoder = st.selectbox(\"Select lbl_encoder\", sub_whole_df['country'].unique())\n",
    "filtered_by_lbl_encoder = sub_whole_df[sub_whole_df['country'] == selected_lbl_encoder]\n",
    "st.write(f\"### test_ids for country {selected_lbl_encoder}\")\n",
    "st.write(filtered_by_lbl_encoder)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
